name: Deploy Staging

on: 
 push:
  branches:
   - main
   - testing-in-ci-cd-pipeline

# uses: dawidd6/action-ansible-playbook@5d970176ea4bfd99a3f5004d48e293fe0994eda1
jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      run-ansible-deploy: ${{ steps.deploy.outputs.ansible || steps.deploy.outputs.app-deploy }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: deploy
        with:
          filters: |
            ansible:
              - 'ansible/**'
            app-deploy:
              - 'python_container_deploy_app/**'

  run-ansible:
    needs: check-changes
    if: needs.check-changes.outputs.run-ansible-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Ansible playbook
      uses: dawidd6/action-ansible-playbook@v2.6.1
      with:
        # Ansible playbook filepath
        playbook: ansible/main.yaml
        # Ansible Galaxy requirements filepath
        # requirements: # optional
        # Root directory of Ansible project (defaults to current)
        # directory: 
        # SSH private key used to connect to the host
        key: ${{ secrets.SSH_STAGING }}
        # Custom content to write into hosts
        inventory: |
          [deploy-server]
          ${{ vars.STAGING_DOMAIN }}
          
          [deploy-server:vars]
          ansible_user=${{ vars.STAGING_USER }}
          base_domain=${{ vars.STAGING_DOMAIN }}
          platform=${{ vars.STAGING_ARCH }}
          debug_mode=false
          
          traefik_dir=/root/traefik
          traefik_api_url="traefik.{{ base_domain }}"
          traefik_api_user=traefik
          traefik_api_password=${{ secrets.TRAEFIK_STAGING_PASSWORD }}
          traefik_acme_email=${{ vars.STAGING_ACME_EMAIL }}
          
          redis_data_dir=/var/lib/redis
          
          target_app_dir=/root/dynamic_deploy
          deploy_url="deploy.{{ base_domain }}"
          dynamic_deploy_user=deploy
          dynamic_deploy_password=${{ secrets.DEPLOY_STAGING_PASSWORD }}
          dynamic_deploy_number_of_rq_workers=${{ vars.DYNAMIC_DEPLOY_NUMBER_OF_RQ_WORKERS }}
          
          data_dir=${{ vars.STAGING_DATA_DIR }}
          grafana_admin_user=admin
          grafana_admin_password=${{ secrets.GRAFANA_STAGING_PASSWORD }}
          
        # The password used for decrypting vaulted files
        # vault_password: # optional
        # Contents of SSH known_hosts file
        # known_hosts: # optional
        # Extra options that should be passed to ansible-playbook command
        # options: # optional
        # Set to "true" if root is required for running your playbook
        # sudo: # optional
        # Set to "true" if the Ansible output should not include colors (defaults to "false")
        # no_color: # optional

  run-tests:
    needs: run-ansible
    if: ${{ ! failure() && ! cancelled() }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: testsuite

    steps:
    - uses: actions/checkout@v4

    # Setup Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11' # Adjust as necessary

    - name: Install poetry
      uses: abatilo/actions-poetry@v2
    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local

    - name: Define a cache for the virtual environment based on the dependencies lock file
      uses: actions/cache@v3
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}

    # Install dependencies using Poetry
    - name: Install dependencies
      run: poetry install --no-root

    # Run the specific pytest test
    - name: Run pytest on specific test
      env:
        CLEANUP: true
        BASE_DOMAIN: ${{ vars.STAGING_DOMAIN }}
        IMAGE_WHOAMI: ${{ vars.TEST_IMAGE_BASIC }}
        IMAGE_ALWAYS_FAIL: ${{ vars.IMAGE_ALWAYS_FAIL }}
        PLATFORM: ${{ vars.STAGING_ARCH }}
        REGISTRY: ${{ vars.STAGING_REGISTRY }}
        REGISTRY_USER: ${{ secrets.STAGING_REGISTRY_USER }}
        REGISTRY_PASSWORD: ${{ secrets.STAGING_REGISTRY_PASSWORD }}
        AUTH_USERNAME: ${{ secrets.DEPLOY_STAGING_USER }}
        AUTH_PASSWORD: ${{ secrets.DEPLOY_STAGING_PASSWORD }}
      run: poetry run pytest integration_tests