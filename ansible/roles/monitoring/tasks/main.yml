---
- name: Run cAdvisor container
  docker_container:
    name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    state: started
    restart_policy: always
    privileged: true
    networks:
      - name: web
    labels:
      system: "true"
      traefik.docker.network: "web"
      traefik.enable: "true"
      traefik.http.routers.cadvisor.rule: "Host(`cadvisor.{{ base_domain }}`)"
      traefik.http.routers.cadvisor.entrypoints: "websecure"
      traefik.http.routers.cadvisor.tls.certresolver: "tlsResolver"
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
    devices:
      - "/dev/kmsg:/dev/kmsg"
    command:
      - "--housekeeping_interval=30s"
      - "--docker_only=true"
      - "--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,hugetlb,referenced_memory,cpu_topology,resctrl"

- name: Create a directory for Prometheus
  file:
    path: "{{ prometheus_dir }}"
    state: directory
    owner: root
    group: root

- name: Copy Prometheus configuration
  copy:
    src: "prometheus.yml"
    dest: "{{ prometheus_dir }}/prometheus.yml"  # Make sure this path is correct
    owner: root
    group: root
    mode: "0644"


- name: Run Prometheus container
  docker_container:
    name: prometheus
    image: prom/prometheus:latest
    state: started
    restart_policy: always
    volumes:
      - "{{ prometheus_dir }}/prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      - name: web
    labels:
      system: "true"
      traefik.docker.network: "web"
      traefik.enable: "true"
      traefik.http.routers.prometheus.rule: "Host(`prometheus.{{ base_domain }}`)"
      traefik.http.routers.prometheus.entrypoints: "websecure"
      traefik.http.routers.prometheus.tls.certresolver: "tlsResolver"
# Grafana

- name: Setup Grafana provisioning directories
  file:
    path: "{{ grafana_dir }}/provisioning/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - datasources
    - dashboards
  become: true


- name: Copy Prometheus datasource provisioning file
  copy:
    src: grafana-prometheus-datasource.yml
    dest: "{{ grafana_dir }}/provisioning/datasources/prometheus-datasource.yml"
    owner: root
    group: root
    mode: '0644'
  become: true


- name: Setup Grafana dashboard provisioning config
  copy:
    content: |
      apiVersion: 1
      providers:
      - name: 'Default'
        orgId: 1
        folder: ''
        type: file
        options:
          path: /etc/grafana/provisioning/dashboards
    dest: "{{ grafana_dir }}/provisioning/dashboards/dashboards.yml"
    owner: root
    group: root
    mode: '0644'
  become: true

- name: Copy dashboard JSON to Grafana provisioning directory
  copy:
    src: tda-dashboard.json
    dest: "{{ grafana_dir }}/provisioning/dashboards/tda-dashboard.json"
    owner: root
    group: root
    mode: '0644'
  become: true


- name: Create Docker volume for Grafana
  docker_volume:
    name: grafana_data

- name: Run Grafana container
  docker_container:
    name: grafana
    image: grafana/grafana:latest
    state: started
    restart_policy: always
    volumes:
      - "grafana_data:/var/lib/grafana"
      - "{{ grafana_dir }}/provisioning:/etc/grafana/provisioning"  # Mount shared provisioning directory
    networks:
      - name: web
    env:
      GF_SECURITY_ADMIN_USER: "{{ grafana_admin_user }}"
      GF_SECURITY_ADMIN_PASSWORD: "{{  grafana_admin_password }}"
    labels:
      system: "true"
      traefik.enable: "true"
      traefik.docker.network: "web"
      traefik.http.routers.grafana.rule: "Host(`grafana.{{ base_domain }}`)"
      traefik.http.routers.grafana.entrypoints: "websecure"
      traefik.http.routers.grafana.tls.certresolver: "tlsResolver"


- name: Ensure redis directory exists
  file:
    path: "{{ redis_data_dir }}"
    state: directory
    owner: root
    group: root
    mode: "0777"

- name: Stop existing NTOPNG container
  docker_container:
    name: "ntopng"
    state: absent

- name: Ensure redis directory exists
  file:
    path: "{{ redis_ntopng_data_dir }}"
    state: directory
    owner: root
    group: root
    mode: "0777"

- name: Run Redis container exposed for ntopng
  docker_container:
    name: redis-ntopng-exposed
    image: redis:7.0
    state: started
    restart_policy: always
    volumes:
      - "{{ redis_ntopng_data_dir }}:/data"
    ports:
      - "6379:6379"
    command: redis-server --protected-mode no

- name: Ensure ntopng directory exists
  file:
    path: /var/lib/ntopng/
    state: directory
    owner: root
    group: root
    mode: "0777"

- name: Copy ntopng configuration file
  ansible.builtin.copy:
    src: ntopng_conf.json
    dest: /var/lib/ntopng/ntopng_conf.json
    owner: root
    group: root
    mode: '0644'

- name: Set ntopng Docker image for amd64
  set_fact:
    ntopng_image: "ntop/ntopng:latest"
  when: platform == "linux/amd64"

- name: Set ntopng Docker image for arm64
  set_fact:
    ntopng_image: "ntop/ntopng_arm64.dev"
  when: platform == "linux/arm64/v8"

- name: Run ntopng container
  docker_container:
    name: ntopng
    image: "{{ ntopng_image }}"
    state: started
    restart_policy: always
    # Removed the ports mapping since we'll use host network mode
    # and ntopng will directly listen on the host's port 3001.
    network_mode: host
    labels:
      system: "true"
    env:
      # Specify any needed environment variables here
    volumes:
      - /var/lib/ntopng:/var/lib/ntopng
    command:
      - "/usr/bin/ntopng"
      - "--community"
      - "--interface=traefik0"
      - "-w 0.0.0.0:3001"
      - "--redis=localhost:6379@15"
      - "--config /var/lib/ntopng/ntopng_conf.json"
    capabilities:
      # Grant necessary capabilities for network monitoring
      - NET_ADMIN
      - NET_RAW
#    # Ensure the container runs as root to access network devices, if not the default
#    user: root