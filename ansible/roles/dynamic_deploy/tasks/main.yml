---
- name: Copy project files to the remote server
  copy:
    src: "{{ source_app_dir }}"
    dest: "{{ target_app_dir }}"
    owner: root
    group: root
    mode: "0755"

- name: Build Docker image for Flask app
  community.general.docker_image:
    name: dynamic_deploy_rq_worker
    source: build
    build:
      path: "{{ target_app_dir }}"
      dockerfile: "{{ rq_worker_dockerfile }}"
    state: present
    force_source: yes

- name: Run multiple RQ workers
  docker_container:
    name: "dynamic_deploy_rq_worker_container_{{ item }}"
    image: dynamic_deploy_rq_worker
    state: started
    restart_policy: always
    recreate: true
    networks:
      - name: "{{ redis_network }}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env:
      BASE_DOMAIN: "{{ base_domain }}"
      TRAEFIK_NETWORK: web
      RQ_DB: "{{ rq_db_id }}"
      REDIS_HOST: "{{ redis_container_name }}"
      REDIS_PORT: "{{ redis_port }}"
      DEPLOY_TIMEOUT: "{{ deploy_timeout }}"
    labels:
      system: "true"
      traefik.enable: "false"
  loop: "{{ range(1, dynamic_deploy_number_of_rq_workers + 1)|list }}"

- name: Build Docker image for Flask app
  community.general.docker_image:
    name: dynamic_deploy_app
    source: build
    build:
      path: "{{ target_app_dir }}"
    state: present
    force_source: yes

- name: Run Docker container for Flask app
  docker_container:
    name: dynamic_deploy_app_container
    image: dynamic_deploy_app
    restart_policy: unless-stopped
    recreate: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      system: "true"
      traefik.enable: "true"
      traefik.http.routers.deploy.rule: "Host(`{{ deploy_url }}`)"
      traefik.http.routers.deploy.middlewares: "deploy-auth"
      traefik.http.middlewares.deploy-auth.basicauth.users: "{{ dynamic_deploy_user }}:{{ dynamic_deploy_password | password_hash('blowfish','1234567890123456789012') }}"
      traefik.http.routers.deploy.entrypoints: "websecure"
      traefik.http.routers.deploy.tls.certresolver: "tlsResolver"
    networks:
      - name: web
      - name: "{{ redis_network }}"
    env:
      BASE_DOMAIN: "{{ base_domain }}"
      TRAEFIK_NETWORK: web
      RQ_DB: "{{ rq_db_id }}"
      REDIS_HOST: "{{ redis_container_name }}"
      REDIS_PORT: "{{ redis_port }}"
      DEBUG_MODE: "{{ debug_mode }}"

- name: Wait for the application to start
  wait_for:
    host: "{{ deploy_url }}"
    port: 443
    delay: 5
    timeout: 60
    state: started

- name: Make PUT request to restart applications stopped by Docker redeploy
  uri:
    url: "https://deploy.{{ base_domain }}/application"
    method: PUT
    user: "{{ dynamic_deploy_user }}"
    password: "{{ dynamic_deploy_password }}"
    force_basic_auth: yes
    status_code: 202
